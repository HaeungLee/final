{
      "role": "system",
      "content": "You are a helpful assistant for selecting functions to call.\n\nUse the supplied tools to select some functions of `getApiFunctions()` returned.\n\nWhen selecting functions to call, pay attention to the relationship between functions. In particular, check the prerequisites between each function.\n\nIf you can't find any proper function to select, just type your own message. By the way, when typing your own message, please consider the user's language locale code. If your message is different with the user's language, please translate it to the user's."
    }

    OpenAI API 스트리밍 응답 시작
OpenAI API 요청 파라미터: {
  "messages": [
    {
      "role": "system",
      "content": "당신은 간결하고 명확한 답변을 제공하는 어시스턴트입니다.\n\n🚨 절대 규칙 🚨\n- 모든 응답은 반드시 한국어로만 작성하세요\n- 절대로 영어를 사 용하지 마세요\n- Function call 결과도 한국어로만 설명하세요\n- \"The result\", \"Function Call Summary\", \"Here are the details\" 같은 영어 표현 금지\n- 최대 30토큰(약 15단어)으로 극도로 간결하게 답변하세요\n\n응답 형식:\n- 성공: \"성공했습니다!\" 또는 \"완료되었습니다!\"\n- 실패: \"실패했습니다\" + 간단한 이유\n- ID 필요시: \"성공했습니다! ID: [ID번호]\""
    },
    {
      "role": "assistant",
      "tool_calls": [
        {
          "type": "function",
          "id": "getApiFunctions",
          "function": {
            "name": "getApiFunctions",
            "arguments": "{}"
          }
        }
      ]
    },
    {
      "role": "tool",
      "tool_call_id": "getApiFunctions",
      "content": "[{\"name\":\"_0_getListGuildMembers\",\"description\":\"Discord Service.\\n\\nGet a list of members on the server\"},{\"name\":\"_0_createDM\",\"description\":\"Discord Service.\\n\\nCreate a new DM channel\"},{\"name\":\"_0_modifyGuild\",\"description\":\"Discord Service.\\n\\nModify server information\"},{\"name\":\"_0_getGuildChannels\",\"description\":\"Discord Service.\\n\\nGet a list of channels on the server\"},{\"name\":\"_0_createGuildChannel\",\"description\":\"Discord Service.\\n\\nCreate a new channel on the server\"},{\"name\":\"_0_removeGuildMember\",\"description\":\"Discord Service.\\n\\nKicks selected members from the server\"},{\"name\":\"_0_modifyChannel\",\"description\":\"Discord Service.\\n\\nModify channel information\"},{\"name\":\"_0_deleteChannel\",\"description\":\"Discord Service.\\n\\nDelete the selected channel\"},{\"name\":\"_0_getPinnedMessages\",\"description\":\"Discord Service.\\n\\nGet a list of pinned messages in a channel\"},{\"name\":\"_0_pinMessage\",\"description\":\"Discord Service.\\n\\nPin a message to a channel\"},{\"name\":\"_0_unpinMessage\",\"description\":\"Discord Service.\\n\\nUnpin a pinned message from a channel\"},{\"name\":\"_0_getChannelMessageHistories\",\"description\":\"Discord Service.\\n\\nGet the messages that exist in the channel\"},{\"name\":\"_0_createMessage\",\"description\":\"Discord Service.\\n\\nSend a message\"},{\"name\":\"_0_editMessage\",\"description\":\"Discord Service.\\n\\nModify the message\"},{\"name\":\"_0_deleteMessage\",\"description\":\"Discord Service.\\n\\nDelete message\"},{\"name\":\"_0_bulkDeleteMessages\",\"description\":\"Discord Service.\\n\\nDelete multiple messages\"},{\"name\":\"_0_getGuildIds\",\"description\":\"Discord Service.\\n\\nGet the guild IDs of the user\"},{\"name\":\"_1_getUserOrganizations\",\"description\":\"Github Service.\\n\\nList organizations for a user\\n\\nLook up the user's organization list, but since you can't look up the user's private organization here,\\nyou can't really conclude that there isn't an empty array.\"},{\"name\":\"_1_getAuthenticatedUserOrganizations\",\"description\":\"Github Service.\\n\\nList organizations for the authenticated user\\n\\nInquire the user's repository.\\nHere, the user is an authenticated user, which means a user of that token.\\nIf a user does not select an organization at login or ask the organization's admin to link it,\\nthe resource might not be viewed even if the token scope has permissions.\"},{\"name\":\"_1_getCommitHeads\",\"description\":\"Github Service.\\n\\nLists all branches that contain the HEAD commit of a GitHub repository.\\n\\nThis function utilizes the GitHub API to retrieve a list of branches where the current\\nHEAD commit (the latest commit on the checked-out branch) is included. This is useful for\\ndetermining which branches contain the most recent changes.\"},{\"name\":\"_1_getReceivedEvents\",\"description\":\"Github Service.\\n\\nList events received by the authenticated user\\n\\nThese are events that you've received by watching repositories and following users.\\nIf you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.\\nIn this case, the \\\"received\\\" event includes the repository that the user is interested in or the activity of the user who is following,\\nfor example, if the user has pushed to the repository, or if an issue has been created from the repository that the user is interested in.\"},{\"name\":\"_1_getUserOrganizationEvents\",\"description\":\"Github Service.\\n\\nLists organization events for the authenticated user\\n\\nThis API endpoint retrieves events that have occurred within the organizations\\nthe authenticated user is a member of. It includes activities such as issues,\\npull requests, commits, and other actions taken within the organization's repositories.\\n\\nThe events cover all repositories within the organization that the user has access to,\\nmaking it useful for tracking the organization's activity or monitoring the progress\\nof projects that the user is involved in within the team.\"},{\"name\":\"_1_readPullRequestRequestedReviewers\",\"description\":\"Github Service.\\n\\nGet all requested reviewers\\n\\nGets the users or teams whose review is requested for a pull request.\\nOnce a requested reviewer submits a review, they are no longer considered a requested reviewer.\\nTheir review will instead be returned by the List reviews for a pull request operation.\\n\\nThe requested_reviewers are the ones who have been asked to review, but not yet.\\nSo when you see someone who has reviewed a PR, if that person is someone who has already finished a review, he/she will be part of the reviewers, not the requested_reviewers.\\nTherefore, when you look at a reviewer, you should look at it separately between someone who has not yet reviewed it and one person who has reviewed it, which you should also call other features to see together.\\nRefer to connector `:post /connector/github/repositories/pull-requests/get-reviews`.\"},{\"name\":\"_1_removeRequestedReviewers\",\"description\":\"Github Service.\\n\\nRemoves review requests from a pull request for a given set of users and/or teams\\n\\nYou should check the person who has already been requested as a reviewer, i.e., requested_reviewers, and then send out the delete request.\\nEven if you don't do that, there will be no error, but it doesn't mean anything if you delete the person who hasn't been requested as a reviewer.\"},{\"name\":\"_1_requestReviewers\",\"description\":\"Github Service.\\n\\nRequest reviewers for a pull request\\n\\nRequests reviews for a pull request from a given set of users and/or teams. This endpoint triggers notifications.\\nYou can specify a reviewer by the user's name alone, but not by anyone, so use a connector that looks up collaborators first.\"},{\"name\":\"_1_readReviewComments\",\"description\":\"Github Service.\\n\\nList comments for a pull request review\\n\\nLists comments for a specific pull request review.\"},{\"name\":\"_1_readReviews\",\"description\":\"Github Service.\\n\\nList reviews for a pull request\\n\\nPull Request Reviews are groups of pull request review comments on a pull request, grouped together with a state and optional body comment.\\nLists all reviews for a specified pull request. The list of reviews returns in chronological order.\\nSince github distinguishes requested_reviewers from those who have already completed the review,\\nif you want to see a review for any PR, you should look up both of these connectors.\"},{\"name\":\"_1_reviewPullRequest\",\"description\":\"Github Service.\\n\\nCreate a review for a pull request\\n\\nPENDING pull request reviews are not submitted and therefore do not include the submitted_at property in the response. Leave the event parameter blank to create a pending review.\\nThe position value indicates the line number in the file, counting from the first \\\"@@\\\" hunk header. The line below \\\"@@\\\" is position 1, the next is position 2, and so on.  Newline characters (\\\\n), whitespace lines and additional hunks affect the position. The position resets to 1 when a new file begins.\\nImportant: Differentiate between submitting a review and adding a comment to a pull request. Leave a review in the PENDING state to submit it later. Use the comment API, not the review API, to add a comment.\\nYou can specify multiple lines for a comment in a pull request review using the multi-line comment functionality in the API. This is helpful for explaining larger blocks of code or providing feedback on multiple lines at once.\"},{\"name\":\"_1_readPullRequestFiles\",\"description\":\"Github Service.\\n\\nList pull requests files\\n\\nThis is useful to see what files are contained in that PR.\\nEach file's patch contains the entire format of the file.\\nHowever, if you want to know the changes, you should look up diff, which is implemented with a different connector, so you'd better refer to it.\\n\\nIf the user wants to see each PR unit, this connector will be suitable.\"},{\"name\":\"_1_readPullRequestCommits\",\"description\":\"Github Service.\\n\\nList commits on a pull request\\n\\nLists a maximum of 250 commits for a pull request.\\nTo receive a complete commit list for pull requests with more than 250 commits, use the List commits endpoint.\\n\\nIf the user wants to see each PR unit, this connector will be suitable.\"},{\"name\":\"_1_readPullRequestDiff\",\"description\":\"Github Service.\\n\\nGet a diff of pull-request info\\n\\nThis is the same as PR's ability to query files,\\nbut the format that this function returns is a string, which is more suitable for identifying changes to each file than viewing each file object,\\nand in github, this is called the application/vnd.github.diff format.\\nThis helps you see at a glance what codes have disappeared and been added in a form suitable for code review.\\n\\nIf the user wants to see each PR unit, this connector will be suitable.\\n\\nIf there are too many changes, the connector can export a 406 error.\\nIn this case, it may be difficult to determine each change, but it is recommended to use the List pull requests connector.\\n\\nThe numbers after the /@/@ symbol represent the number of start lines and the number of changed lines.\\nThe details are given in Response Type. However, since this line represents the start line,\\na particular line of code should be relative to the value of the position considering the letter of the line.\"},{\"name\":\"_1_readPullRequestDetail\",\"description\":\"Github Service.\\n\\nGet a deatiled pull-request info\\n\\nYou can view detailed PR information using the PR number.\\nHere, you can see the branch to be merged and the information on the branch it points to, and you can see information such as the status of the PR, the time of each state, and the person who created the PR.\\nHowever, it should be used with other connectors because it provides information close to the header of PR and does not provide information about each file or commit of PR.\\n\\nIf the user wants to see each PR unit, this connector will be suitable.\"},{\"name\":\"_1_getRepositoryPullRequest\",\"description\":\"Github Service.\\n\\nList repository pull requests\\n\\nQuery pool requests to specific repositories.\\nHere, you can filter issues and see only pool requests, and you can sort them by creation and inquiry dates, or filter by open or closed status.\\nThe content of the body is omitted, so if you want to see it, you should use the detailed lookup connector.\\nIf the user wants to see the body property, '/connector/github/repositories/pull-requests/get-detail' connector must be called.\"},{\"name\":\"_1_fetchRepositoryIssues\",\"description\":\"Github Service.\\n\\nList repository issues.\\n\\nThis connector allows viewing repository issues without authentication.\\nIt provides issue details, including up to 10 users and labels, but omits the body.\\n\\nTo view the issue body, use the detailed lookup connector:\\n'/connector/github/repositories/issues/get-detail'.\\n\\nIssues can be filtered by open/closed status and sorted by creation time,\\nupdate time, comment count, or reaction count.\\n\\nSince the repository owner is unknown, users must specify the owner in the request.\"},{\"name\":\"_1_getOrganizationIssues\",\"description\":\"Github Service.\\n\\nList organization issues assigned to the authenticated user\\n\\nSimilar to the 'get-issues' connector, it is suitable for inquiring only about issues assigned within a specific organization.\\nNaturally, the user will have to be a member of that organization.\\n\\nHere, the result value can be inquired together with PR because PR on GitHub is essentially an issue-like object.\\nIf you want to see the issue separately, you should use a connector that looks up the issue in the repo, not the organization.\"},{\"name\":\"_1_getOrganizationEvents\",\"description\":\"Github Service.\\n\\nList public organization events\\n\\nIf you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.\\n\\nThis API endpoint retrieves a stream of public events that have occurred\\nwithin a specified organization. These events include activities such as\\nrepository creation, issues, pull requests, and other actions taken by members\\nof the organization across all its public repositories.\\n\\nThis is useful for monitoring the public activity within an organization,\\nproviding insights into how the organization is managing its projects,\\nthe work being done by its members, and the overall public engagement with\\nits repositories.\"},{\"name\":\"_1_getCollaborators\",\"description\":\"Github Service.\\n\\nList repository collaborators\\n\\nFor organization-owned repositories, the list of collaborators includes outside collaborators,\\norganization members that are direct collaborators, organization members with access through team memberships,\\norganization members with access through default organization permissions, and organization owners.\\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\\nTeam members will include the members of child teams.\\n\\nYou can refer to it before specifying a person in charge of the issue or a reviewer for PR.\"},{\"name\":\"_1_createFileContents\",\"description\":\"Github Service.\\n\\nCreate file content in github repository\\n\\nThis connector handles file creation only. Use the modification API for existing files.\\nCreating a file is equivalent to a single commit, with commits required for changes like uploads or deletions.\\nWhen adding a file, confirm the target branch. Avoid default branches unless specified.\\nUsers value branches reflecting their work; always confirm file content before adding or modifying.\\nFor requests involving a specific PR or branch, use this connector.\\nFile content input is encoded to base64 within the connector. Do not pre-encode content manually.\"},{\"name\":\"_1_updateFileContents\",\"description\":\"Github Service.\\n\\nUpdate file content in github repository\\n\\nUpdating a file creates a single commit. Commits are hashes for saving changes like uploads, modifications, or deletions.\\nEnsure the latest sha value is used to avoid conflicts. Check sha via API or from recently created files.\\nModifying a file overwrites it, not appends to it. Verify existing code and make partial changes if needed.\\nConfirm content with the user before adding or modifying files.\\nFor specific PRs or branches, use this connector. Check commit conventions and commit-list for proper messaging.\\nFile content is automatically encoded to base64 by the connector; do not pre-encode manually.\"},{\"name\":\"_1_upsertFileContent\"},{\"name\":\"_1_deleteFileContents\",\"description\":\"Github Service.\\n\\nDelete file content in github repository\\n\\nTo delete file content is the same as creating a single commit.\\nCommit is a hash that must be created in github to save changes, such as uploading, modifying, deleting, and so on.\\n\\nAs the sha value of the file to be modified, a conflict may occur if it is not the latest sha value among the sha values of the file.\\nIt's safe when you look up a list of files through API to check sha and put in a value, or want to re-modify the sha value of a file you just created.\\n\\nIf the user directly asks you to add, modify, or delete a file for a specific PR or specific branch, this connector should be considered.\\nMany repositories are working on commit conventions. Before committing, it's a good idea to look up the commit-list to see how you leave the commit message.\"},{\"name\":\"_1_getRepositoryFolderStructures\",\"description\":\"Github Service.\\n\\nReview Repository Folder Structure\\n\\nIt allows you to know the overall folder structure by traversing files in the repository.\\nThis feature is intended to navigate like a DFS based on folders.\\nIf this function is so vast that you cannot see the entire folder, you can pass the `path` again to inquire.\\nThe `path` delivered is treated like a Root folder and continues the navigation from this folder.\\nThis feature is designed to navigate to the inside two more times, up to steps 0, 1 at a time, based on the root folder.\\n\\nIf you want to know the details of the file, it is recommended to use the get-contents connector.\"},{\"name\":\"_1_getBulkFileContents\",\"description\":\"Github Service.\\n\\nLook up repository files(bulk)\\n\\nIf the file you want to inquire is a folder, internal files are provided in an array,\\nand if it is a file, it inquires about the encoding method of the file and the body content of the file.\\nSince there may be countless files and folders in the github repository, there may be many files that exceed the rate limit.\\nIn this case, you can try to solve this problem by sequentially finding the folders one by one using the corresponding connector.\\nYou can pass multiple file paths to view multiple files at the same time.\\nThere is no limit to the number of files.\\n\\nThis is suitable for viewing files on specific branches, but if the user is for the purpose of viewing details of code reviews or PR, it is recommended to use a different connector.\\nThere are connectors that view the list of files changed in PR, or see the changes.\"},{\"name\":\"_1_getFileContents\",\"description\":\"Github Service.\\n\\nLook up repository files\\n\\nIf the file you want to inquire is a folder, internal files are provided in an array,\\nand if it is a file, it inquires about the encoding method of the file and the body content of the file.\\nSince there may be countless files and folders in the github repository, there may be many files that exceed the rate limit.\\nIn this case, you can try to solve this problem by sequentially finding the folders one by one using the corresponding connector.\\n\\nThis is suitable for viewing files on specific branches, but if the user is for the purpose of viewing details of code reviews or PR, it is recommended to use a different connector.\\nThere are connectors that view the list of files changed in PR, or see the changes.\"},{\"name\":\"_1_getReadmeFile\",\"description\":\"Github Service.\\n\\nRead the README file in the repository\\n\\nREADME is one of the initial settings of the project and usually records a description of this repository,\\nso it's useful if you want to see a rough description of the repository.\"},{\"name\":\"_1_getRepoEvents\",\"description\":\"Github Service.\\n\\nList events for the authenticated user\\n\\nIf you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.\\nYou can check all events surrounding the repository, such as who inquired and who forked.\\nIt is used in conjunction with a connector that inquires the activity details and is suitable for checking how active the repository is.\"},{\"name\":\"_1_getNetworkRepoEvents\",\"description\":\"Github Service.\\n\\nFetches events across all forks of a specified repository.\\n\\nThis API endpoint provides a stream of events that occur in any fork\\nof the specified repository. It includes actions such as commits,\\npull requests, issues, and other activity happening in the forked\\nrepositories.\\n\\nUse this endpoint when you need to monitor the activity not just\\nin the original repository, but also in all of its forks. This can\\nbe particularly useful for understanding the broader impact or\\nactivity surrounding a popular project that has been forked multiple\\ntimes.\"},{\"name\":\"_1_getUserEvents\",\"description\":\"Github Service.\\n\\nList events for the authenticated user\\n\\nThis API endpoint retrieves a stream of events related to the authenticated user,\\nincluding activities such as issues, pull requests, commits, and repository actions\\nthat the user has participated in or been mentioned in. The events reflect the user's\\ninteractions across all repositories they have access to, both public and private (if\\nthe user has appropriate permissions).\\n\\nThis is useful for tracking a user's activity on GitHub, allowing you to see a\\npersonalized feed of their involvement in various projects and interactions with\\nother users.\\n\\nIf you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.\\nIt looks up users' public events. Username should be your own nickname because you can usually only see your own events.\"},{\"name\":\"_1_getEvents\",\"description\":\"Github Service.\\n\\nList public events\\n\\nThis API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.\\nWhen I look up the events, they may not be of much value to the user because they are events that occurred on github.\\n\\nIt's looking up public events, and it's looking at events that occur on github regardless of the specific user.\\nTherefore, it may not be of much use unless it is a special case.\\nIf you want to get your information, it would be more advantageous to use the 'user/get-events' connector.\"},{\"name\":\"_1_debugToken\"},{\"name\":\"_1_updateIssue\",\"description\":\"Github Service.\\n\\nUpdate an issue in the repository\\n\\nUpdate an issue, where you can enter labels and assignes together.\\nThe information you must enter is who will create the issue in the owner's repository and under what title.\\nThe information in the text should follow the markdown grammar allowed by github.\\n\\nIn some cases, if you are not the owner of this repository, you may not be able to make any marking on issues such as labels, assignees, milestones, etc.\\nIt can also be used to close or reopen issues.\"},{\"name\":\"_1_createIssue\",\"description\":\"Github Service.\\n\\nLeave an issue in the repository\\n\\nCreate an issue, where you can enter labels and assignes together.\\nThe information you must enter is who will create the issue in the owner's repository and under what title.\\nThe information in the text should follow the markdown grammar allowed by github.\\n\\nIn some cases, if you are not the owner of this repository, you may not be able to make any marking on issues such as labels, assignees, milestones, etc.\\n\\nIn order to create issue, you may need to refer to the issue template files that you specified in the .github folder in advance, in which case refer to the connector 'POST /connector/github/repos/get-contents'.\"},{\"name\":\"_1_getRepositoryActivities\",\"description\":\"Github Service.\\n\\nGet repository activities\\n\\nYou can use it to see how active your contribution is to the repository\\nbecause it looks up all the activities that have occurred in the repository.\\n\\nThe types of activities that can be viewed here are as follows, and you can also find out by which user it was operated.\\npush, force_push, branch_creation, branch_deletion, pr_merge, merge_queue_merge\"},{\"name\":\"_1_updatePullRequest\",\"description\":\"Github Service.\\n\\nUpdate pull request\\n\\nUse to change the title or body of a PR, or draft status or open-close status.\\nIt can also be used for overwriting labels or modifying them.\\nIt can also be used to close or reopen pull request.\"},{\"name\":\"_1_createPullRequest\",\"description\":\"Github Service.\\n\\nCreate pull request\\n\\nCreates a pull request from a branch to a particular branch.\\nIf the branch has already generated a pull request to the base branch, an error of 422 may occur.\\nThis error indicates a collision because only one pull request from branch to another branch can exist open at the same time.\\n\\nIf the user wants to see each PR unit, this connector will be suitable.\\n\\nWhen creating a PR, be sure to specify the base branch and the head branch, and even if it can be omitted, be sure to include Titles and bodies as much as possible.\\nYou can also create a pull request in draft state if necessary.\\n\\nIn order to create PR, you may need to refer to the PULL_REQUEST_TEMPLATE.md file that you specified in the .github folder in advance, in which case refer to the connector 'POST /connector/github/repos/get-contents'.\"},{\"name\":\"_1_searchUser\",\"description\":\"Github Service.\\n\\nSearch for users by keyword in github\"},{\"name\":\"_1_getUserProfile\",\"description\":\"Github Service.\\n\\nLook up the user's detailed profile\\n\\nThe property information you can find at the time of inquiry is as follows.\\n\\n- avatar_url, bio, blog, company, created_at, email,\\n- followers, following, id, location, login, name,\\n- pinned_repositories, profile_repository, public_gists,\\n- public_repos, twitter_username, type, updated_at\"},{\"name\":\"_1_getIssues\",\"description\":\"Github Service.\\n\\nGet Related Issue List.\"},{\"name\":\"_1_getIssueDetail\",\"description\":\"Github Service.\\n\\nGet a deatiled issue info\\n\\nUnlike the body omitted from the issue list inquiry, it is suitable for viewing details as it can inquire all the contents.\\nHowever, this connector alone cannot see all the comments or timelines inside, and other connectors must be used.\"},{\"name\":\"_1_getPullRequestComments\",\"description\":\"Github Service.\\n\\nList pull request comments\\n\\nYou can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\\nIn any case, you can also view comments with the number on pull request.\\nIssue comments are ordered by ascending ID.\\n\\nThis is actually the same as connector POST '/connector/github/repositories/issues/get-comments'.\\nComments and reviews on PR are separate, you can only see comments on this connector.\"},{\"name\":\"_1_getIssueComments\",\"description\":\"Github Service.\\n\\nList issue comments\\n\\nYou can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\\nIn any case, you can also view comments with the number on pull request.\\nIssue comments are ordered by ascending ID.\"},{\"name\":\"_1_createPullRequestComments\",\"description\":\"Github Service.\\n\\nCreate an pull request comment\"},{\"name\":\"_1_createIssueComments\",\"description\":\"Github Service.\\n\\nCreate an issue comment\\n\\nAdd a comment. If you put an issue number, you can add a comment to the issue, where the issue number is also the number of PR.\\nIn other words, both issue and PR can add a comment through this connector.\"},{\"name\":\"_1_getOrganizationRepositories\",\"description\":\"Github Service.\\n\\nList organization repositories\\n\\nThis endpoint allows you to list all repositories that belong to a specified organization on GitHub.\\nIt's useful for viewing all the repositories under an organization’s account, including both public and private repositories, depending on your access level.\"},{\"name\":\"_1_getUserPinnedRepository\",\"description\":\"Github Service.\\n\\nInquire the user's pinned repositories\\n\\nInquire up to 6 repositories where the user has pinned.\\nHere, only the name of the repository is searched, so if necessary, find detailed information about the repository by pageing the user's repository list.\\nPlacing a pin in a repository is most likely a repository that users are most confident in.\"},{\"name\":\"_1_getUserRepositories\",\"description\":\"Github Service.\\n\\nInquire the user's repositories\\n\\nSince it contains only the simplest information of the repository here, there is no way to know the lead me of the repository or detailed information.\\nIt is recommended to use additional connectors to explore because other connectors have the ability to read leads or internal files in the repository.\"},{\"name\":\"_1_getRepositoryBranches\",\"description\":\"Github Service.\\n\\nInquire the user's branch\\n\\nYou can look up a list of branches in a specific repository.\\nBecause it says what the last commit is, and when and to whom it was made,\\nyou can see which of the branches is the latest and managed.\\n\\nYou shouldn't call the main branch arbitrarily because there may be people who use the master branch.\"},{\"name\":\"_1_createBranches\",\"description\":\"Github Service.\\n\\nCreate branch\\n\\nCreates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.\\nYou need to know the sha of the commit, so if you want to create a branch, you should first call another connector that looks up the commit list or header commitments to find out the sha value.\\nIf you want to copy the branch, you should also look up the commit history of the branch and then retrieve the sha value from the branch's HEAD commit.\"},{\"name\":\"_1_getPullRequestAssociatedWithACommit\",\"description\":\"Github Service.\\n\\nList pull requests associated with a commit\\n\\nFetches the pull requests (PRs) associated with a specific commit in a GitHub repository.\\nThis API endpoint retrieves a list of pull requests that include the specified commit.\\nThis can be useful for tracking where and how a particular change was merged into a branch.\"},{\"name\":\"_1_getCommit\",\"description\":\"Github Service.\\n\\nInquire the commit details of the user\\nIt contains all the history of how the file changed, so you can see the details of a single commit node.\\nIf you do not deliver ref, look up based on default_branch.\"},{\"name\":\"_1_getCommitDiff\",\"description\":\"Github Service.\\n\\nInquire the commit diff of the user\\ndiff is Github's own content type specification that allows you to identify changes per commit on the Github homepage.\\nIf you do not deliver ref, look up based on default_branch.\"},{\"name\":\"_1_getCommitList\",\"description\":\"Github Service.\\n\\nLook up the list of commitments for a specific repo, a specific branch\\n\\nThis function can be used in general because it sees the commit list in units of branches, but if the user wants to see it in units of PR, it is better to use another connector.\\nIf the user specifies to view in PR units, use other connectors because there are connectors for viewing files, commit lists, and changes in PR units elsewhere.\"},{\"name\":\"_1_getFollowers\",\"description\":\"Github Service.\\n\\nInquire the followers of the user\\n\\nThis value can be viewed by about 100 people at a time because it is a page-nated result.\\nIf you have someone you're looking for, it's important to keep looking for the next page, even if you haven't found the value on the first page.\"},{\"name\":\"_1_getFollowees\",\"description\":\"Github Service.\\n\\nInquire the followees of the user\\n\\nThis value can be viewed by about 100 people at a time because it is a page-nated result.\\nIf you have someone you're looking for, it's important to keep looking for the next page, even if you haven't found the value on the first page.\"},{\"name\":\"_1_getLabels\",\"description\":\"Github Service.\\n\\nList labels for a repository\\n\\nView a list of issues created and used in that repository.\\nEach issue will only have labels that are already registered in this repository.\\nOf course, it doesn't necessarily mean that you have to use only the labels here when creating issues,\\nbut it would be beneficial to assign them by referring to the labels here.\"},{\"name\":\"_2_deleteMailList\",\"description\":\"Gmail Service.\\n\\nDelete multiple mails\\n\\nGmail is a free web-based email service provided by Google.\\nThis function requires special attention because it permanently deletes mail instead of moving it to the trash.\\nMost users will want to delete mail that is already in the trash.\\nTherefore, if the user wants to delete it, it is better to guide them to move the mail to the trash, but if they still want to delete it, it is right to target the trash.\"},{\"name\":\"_2_hardDelete\",\"description\":\"Gmail Service.\\n\\nDelete mail\\n\\nGmail is a free web-based email service provided by Google.\\n\\nThis function requires special attention because it permanently deletes mail instead of moving it to the trash.\\n\\nMost users will want to delete mail that is already in the trash.\\n\\nTherefore, if the user wants to delete it, it is better to guide them to move the mail to the trash, but if they still want to delete it, it is right to target the trash.\"},{\"name\":\"_2_sendEmail\",\"description\":\"Gmail Service.\\n\\nSending mail\\n\\nGmail is a free web-based email service provided by Google.\\n\\nThis connector is for sending emails,\\nand if you send it as simple text, the sentences will be displayed as one long line, so you need to insert a line break character.\\nThe current format uses `text/html; charset=utf-8` as content-type.\\nIn some cases, you can use the HTML format.\\n\\nIf you want to attach a file, you must specify the name of the file and the address at which it is stored.\\nThe saved file is read as a GET request inside the function, encoded, and processed.\"},{\"name\":\"_2_createDraft\",\"description\":\"Gmail Service.\\n\\nCreate a mail draft\\n\\nGmail is a free web-based email service provided by Google.\\n\\nThis connector is for sending emails,\\nand if you send it as simple text, the sentences will be displayed as one long line, so you need to insert a line break character.\\nThe current format uses `text/html; charset=utf-8` as content-type.\\nIn some cases, you can use the html format.\\n\\nIf you want to attach a file, you must specify the name of the file and the address at which it is stored.\\nThe saved file is read as a GET request inside the function, encoded, and processed.\"},{\"name\":\"_2_reply\",\"description\":\"Gmail Service.\\n\\nReply to received email\\n\\nGmail is a free web-based email service provided by Google.\\n\\nThis connector is for sending emails,\\nand if you send it as simple text, the sentences will be displayed as one long line, so you need to insert a line break character.\\nThe current format uses `text/html; charset=utf-8` as content-type.\\nIn some cases, you can also use the HTML format.\"},{\"name\":\"_2_createLabel\",\"description\":\"Gmail Service.\\n\\nCreate a label\\n\\nGmail is a free web-based email service provided by Google.\"},{\"name\":\"_2_addLabelToMail\",\"description\":\"Gmail Service.\\n\\nAssign a label to a mail\\n\\nGmail is a free web-based email service provided by Google.\"},{\"name\":\"_2_removeLabelFromMail\",\"description\":\"Gmail Service.\\n\\nRemove labels assigned to mail\\n\\nGmail is a free web-based email service provided by Google.\"},{\"name\":\"_2_findEmail\",\"description\":\"Gmail Service.\\n\\nGet information about a mail\\n\\nGmail is a free web-based email service provided by Google.\"},{\"name\":\"_2_findEmails\",\"description\":\"Gmail Service.\\n\\nGet mailing list\\n\\nGmail is a free web-based email service provided by Google.\"},{\"name\":\"_2_removeEmail\",\"description\":\"Gmail Service.\\n\\nMove mail to trash\\n\\nGmail is a free web-based email service provided by Google.\"},{\"name\":\"_3_getCalendarList\",\"description\":\"Google Calendar Service.\\n\\nGet a list of Google Calendars\"},{\"name\":\"_3_createCalendar\",\"description\":\"Google Calendar Service.\\n\\nCreate a Google Calendar\"},{\"name\":\"_3_deleteCalendar\",\"description\":\"Google Calendar Service.\\n\\nDelete a calendar\"},{\"name\":\"_3_eventList\",\"description\":\"Google Calendar Service.\\n\\nGet a list of events in Google Calendar\"},{\"name\":\"_3_createQuickEvent\",\"description\":\"Google Calendar Service.\\n\\nAdd a quick event to Google Calendar\"},{\"name\":\"_3_createEvent\",\"description\":\"Google Calendar Service.\\n\\nAdd an event to Google Calendar\"},{\"name\":\"_3_updateEvent\",\"description\":\"Google Calendar Service.\\n\\nModify an event\"},{\"name\":\"_3_addAttendeesToEvent\",\"description\":\"Google Calendar Service.\\n\\nAdd attendees to an event\"},{\"name\":\"_3_deleteEvent\",\"description\":\"Google Calendar Service.\\n\\nDelete an event\"},{\"name\":\"_4_update\",\"description\":\"Google Docs Service.\\n\\nUpdate Google Docs title and contents\"},{\"name\":\"_4_clear\",\"description\":\"Google Docs Service.\\n\\nRemove entire contents of google docs\\n\\nMake Google Docs a blank file like you just created.\"},{\"name\":\"_4_write\",\"description\":\"Google Docs Service.\\n\\nGenerate Google Docs By markdown format string\\n\\nCreate a document with a markdown, which is the ID of the markdown file and the ID of the document.\\nIn the case of Google Docs, URLs are included, so you can open and inquire files directly based on your ID.\"},{\"name\":\"_4_createDocs\",\"description\":\"Google Docs Service.\\n\\nGenerate Google Docs\\n\\nSince this is creating a blank page, we recommend that you use\\nconnectors that add the content of google-docs in a row.\\nAlternatively, we recommend using a different connector because\\nthere are other connectors that have the ability to generate\\ndocuments with markdown.\"},{\"name\":\"_4_permission\",\"description\":\"Google Docs Service.\\n\\nGrant permission to Google Docs\"},{\"name\":\"_4_readDocs\",\"description\":\"Google Docs Service.\\n\\nRead the contents of Google Docs\"},{\"name\":\"_4_createDocByTemplate\",\"description\":\"Google Docs Service.\\n\\nCreate new Google Docs by copying existing Google Docs\"},{\"name\":\"_4_deleteById\",\"description\":\"Google Docs Service.\\n\\nDelete Google Docs By ID.\"},{\"name\":\"_4_list\",\"description\":\"Google Docs Service.\\n\\nGet a list of Google Docs\"},{\"name\":\"_4_getDocuments\"},{\"name\":\"_4_getEndIndex\"},{\"name\":\"_4_append\",\"description\":\"Google Docs Service.\\n\\nAdd text to Google Docs\\n\\nWhen you pass the input of the markdown format, change the markdown to the appropriate format.\\nIt is recommended to check the existing content\\nand then use the `update` connector to include the existing content,\\nin the case of the 'append' connector, it is not fully Markdown compatible.\\nUpdate connector is `PUT /connector/google-docs/:id`.\"},{\"name\":\"_5_folderList\",\"description\":\"Google Drive Service.\\n\\nGet a list of folders in Google Drive\"},{\"name\":\"_5_getFolderByName\"},{\"name\":\"_5_fileList\",\"description\":\"Google Drive Service.\\n\\nGet a list of files in Google Drive\"},{\"name\":\"_5_createFolder\",\"description\":\"Google Drive Service.\\n\\nCreate a new folder in Google Drive\"},{\"name\":\"_5_deleteFolder\",\"description\":\"Google Drive Service.\\n\\nDelete a folder in Google Drive\"},{\"name\":\"_5_createFile\"},{\"name\":\"_5_uploadFile\",\"description\":\"Google Drive Service.\\n\\nCreate a new file in Google Drive\"},{\"name\":\"_5_deleteFile\",\"description\":\"Google Drive Service.\\n\\nDelete a file in Google Drive\"},{\"name\":\"_5_permission\",\"description\":\"Google Drive Service.\\n\\nGrants permission to access a file or folder\"},{\"name\":\"_5_getFile\",\"description\":\"Google Drive Service.\\n\\nRead text from a file\"},{\"name\":\"_6_search\",\"description\":\"Google Search Service.\\n\\nSearch Google for the search term you entered\"},{\"name\":\"_6_searchResult\",\"description\":\"Google Search Service.\\n\\nSearch Google for the search term you entered\"},{\"name\":\"_7_createSpreadsheet\",\"description\":\"Google Sheet Service.\\n\\nCreate a Google Sheet\\n\\nThe created sheet will be created in the Google Drive root path.\"},{\"name\":\"_7_appendToSheet\",\"description\":\"Google Sheet Service.\\n\\nAdd content to Google Sheets\"},{\"name\":\"_7_readHeaders\",\"description\":\"Google Sheet Service.\\n\\nGet the header information of a Google Sheet\"},{\"name\":\"_7_permission\",\"description\":\"Google Sheet Service.\\n\\nGrant permissions to Google Sheets\"},{\"name\":\"_7_writeHeaders\",\"description\":\"Google Sheet Service.\\n\\nAdd a header to a Google Sheet\"},{\"name\":\"_7_getWorkSheet\",\"description\":\"Google Sheet Service.\\n\\nGet a list of Google Worksheets\"},{\"name\":\"_7_readRows\",\"description\":\"Google Sheet Service.\\n\\nGet row information from Google Sheets\"},{\"name\":\"_8_getGoogleShoppingResults\"},{\"name\":\"_8_musinsa\",\"description\":\"패션 카 테고리\"},{\"name\":\"_8_twentyNineCentimeter\"},{\"name\":\"_8_hansumEQL\"},{\"name\":\"_8_oco\"},{\"name\":\"_8_uniqlo\"},{\"name\":\"_8_coupang\",\"description\":\"Google Shopping Service.\\n\\nSearch for products on Coupang\"},{\"name\":\"_8_kurly\",\"description\":\"Google Shopping Service.\\n\\nSearch for products on Kurly\\nKurly is a service where you can purchase groceries.\"},{\"name\":\"_8_iherb\",\"description\":\"Google Shopping Service.\\n\\nSearch for products on iHerb\\niHerb is a service that allows you to purchase Nutritional supplement.\"},{\"name\":\"_8_aliExpress\",\"description\":\"Google Shopping Service.\\n\\nSearch for products on AliExpress\"},{\"name\":\"_8_oliveYoung\",\"description\":\"Google Shopping Service.\\n\\nSearch for products at Olive Young\\nOlive Young is a service that allows you to purchase cosmetics.\"},{\"name\":\"_8_todayHouse\",\"description\":\"Google Shopping Service.\\n\\nSearch for products at Today House\\nToday House is a service that allows you to purchase home appliances.\"},{\"name\":\"_8_yes24\",\"description\":\"Google Shopping Service.\\n\\nSearch for products on yes24\\nyes24 is a service that allows you to purchase books.\"},{\"name\":\"_8_aladine\",\"description\":\"Google Shopping Service.\\n\\nSearch for products in Aladdin\\nAladdin is a service that allows you to purchase used books.\"},{\"name\":\"_9_dailyTrend\",\"description\":\"Google Trend Service.\\n\\nGet daily search results from Google Trends\"},{\"name\":\"_10_searchByKeyword\",\"description\":\"Kakao Map Service.\\n\\nSearch with Kakao Map\\n\\nIn addition to the place name company, category, and phone number,\\nit also provides lot number and road name addresses in the Korean address system.\\nIt can be used with public data or other address-based connectors.\"},{\"name\":\"_11_getFriends\",\"description\":\"Kakao Talk Service.\\n\\nRetrieves the list of friends on KakaoTalk(카카오톡)\\n\\nKakaoTalk(카카오톡) is a mobile messenger application in South Korea, which also provides various additional services.\\nWhen looking up your friends, only those who linked Kakao Talk in studio-pro will be searched, so you may not be able to check the target.\\nIn this case, it might be better to send a message by email or other means.\"},{\"name\":\"_11_createEvent\",\"description\":\"Kakao Talk Service.\\n\\nAdds an event to the KakaoTalk(카카오톡) calendar\\n\\nKakaoTalk(카카오톡) is a mobile messenger application in South Korea, which also provides various additional services.\"},{\"name\":\"_11_getEvents\",\"description\":\"Kakao Talk Service.\\n\\nRetrieves KakaoTalk(카카오톡) calendar events.\\n\\nThe user needs to provide the calendar ID as an input parameter.\\nIf no calendar is provided, it defaults to retrieving the user's own calendar.\\nTherefore, this feature can be used even if no calendar ID is specified.\\n\\nThe conditions for retrieving events include specifying the period for which events are to be fetched.\\nThis connector is designed to view data for either a week or a month.\\n\\nKakaoTalk(카카오톡) is a mobile messaging application in South Korea, and it also provides additional services.\"},{\"name\":\"_11_getCalendars\",\"description\":\"Kakao Talk Service.\\n\\nRetrieves all KakaoTalk(카카오톡) calendar lists\\n\\nThere are two types of calendars: your primary calendars and calendars you are subscribed to.\\nAll Kakao users have their own personal calendars, so there will be at least one calendar.\\nThe primary calendar has an ID of `primary`, which is the user's own calendar.\\n\\nKakaoTalk(카카오톡) is a mobile messenger application from South Korea that also provides additional services.\"},{\"name\":\"_11_send\",\"description\":\"Kakao Talk Service.\\n\\nSends a text type KakaoTalk(카카오톡) message to a friend\\n\\nKakaoTalk(카카오톡) is a mobile messenger application in South Korea, which also provides various additional services.\\nIf it is not specified who the user wants to send the message, it should not be sent at will.\"},{\"name\":\"_11_memo\",\"description\":\"Kakao Talk Service.\\n\\nSends a commerce type message to myself on KakaoTalk(카카오톡)\\n\\nWhen sending a KakaoTalk(카카오톡) message, there are buttons. If you want to add a link to the button, you should use a URL starting with `https://studio-pro.wrtn.ai/` or a redirect link. If the link starts with `https://studio-pro.wrtn.ai/`, the page will be viewed, otherwise, it will redirect to the new link. This is because only links registered in our domain are allowed according to the KakaoTalk(카카오톡) API specifications.\\n\\nKakaoTalk(카카오톡) is a mobile messenger application in South Korea, which also provides various additional services.\"},{\"name\":\"_12_getCafe\",\"description\":\"Naver Cafe Service.\\n\\nSearch Naver Cafe contents\"},{\"name\":\"_13_deleteBlock\",\"description\":\"Notion Service.\\n\\nDelete a block\\n\\nSets a Block object, including page blocks,\\nto archived: true using the ID specified. Note: in the Notion UI application, this moves the block to the \\\"Trash\\\" where it can still be accessed and restored.\"},{\"name\":\"_13_createFile\",\"description\":\"Notion Service.\\n\\nAppend an file type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `file`.\\n\\nUploading a file exposes it to the Notion page as an icon in the file format, but there is no Preview.\\nIf you want the internal elements to be seen as soon as you enter the page, it is better to create the image, pdf format for each format, and consider embed for other formats.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createEmbed\",\"description\":\"Notion Service.\\n\\nAppend an embed type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `embed`.\\n\\nThis is suitable when you want an internal element to be rendered immediately, such as an imprame within a page.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createBookmark\",\"description\":\"Notion Service.\\n\\nAppend an bookmark type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `bookmark`.\\n\\nBookmarks are visually better and more organized because they have previews, images, and explanations than just saving url as text.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createImage\",\"description\":\"Notion Service.\\n\\nAppend an image type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `image`.\\n\\nimage file's extension is one of: 'bmp', 'gif', 'heic', 'jpg', 'jpeg', 'png', 'svg', 'tif', 'tiff'.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createVideo\",\"description\":\"Notion Service.\\n\\nAppend an video type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `video`.\\n\\nvideo file must be one of: 'amv' ,'asf' ,'avi' ,'f4v' ,'flv' ,'gifv' ,'mkv' ,'mov' ,'mpg' ,'mpeg' ,'mpv' ,'mp4' ,'m4v' ,'qt' ,'wmv'\\nOR\\nYouTube video links that include embed or watch.\\nE.g. https://www.youtube.com/watch?v=[id], https://www.youtube.com/embed/[id]\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createPdf\",\"description\":\"Notion Service.\\n\\nAppend an pdf type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `pdf`.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createCode\",\"description\":\"Notion Service.\\n\\nAppend an code type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `code`.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createEquation\",\"description\":\"Notion Service.\\n\\nAppend an equation type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `equation`.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createDivider\",\"description\":\"Notion Service.\\n\\nAppend an divider type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `divider`.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createTableOfContents\",\"description\":\"Notion Service.\\n\\nAppend an table_of_contents type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `table_of_contents`.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createLinkToPage\",\"description\":\"Notion Service.\\n\\nAppend an link_to_page type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `link_to_page`.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createToggle\",\"description\":\"Notion Service.\\n\\nAppend an toggle type child node\\n\\nNotion is a very complex type, so you have to create a page in a block coding manner.\\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\\nThe type of block you can put in here is `toggle`.\\n\\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.\"},{\"name\":\"_13_createPage\"},{\"name\":\"_13_readPageContents\",\"description\":\"Notion Service.\\n\\nRead the contents of a Notion page.\\nReads the contents of a Notion page in Markdown format.\\n\\nRead Notion page contents\"},{\"name\":\"_13_readPageList\",\"description\":\"Notion Service.\\n\\nRetrieve a list of all pages in your Notion workspace\"},{\"name\":\"_13_getDatabaseInfo\",\"description\":\"Notion Service.\\n\\nRetrieves database information to create items in the database\"},{\"name\":\"_13_getDatabaseListInfo\",\"description\":\"Notion Service.\\n\\nQuery the database list to create items in the database\"},{\"name\":\"_13_getUsers\",\"description\":\"Notion Service.\\n\\nRetrieve the list of users in the workspace\"},{\"name\":\"_13_findPageByTitle\",\"description\":\"Notion Service.\\n\\nSearch for pages by title\"},{\"name\":\"_13_findDatabaseItemList\",\"description\":\"Notion Service.\\n\\nRetrieve a list of items that exist in a table database\"},{\"name\":\"_13_appendBlocksByMarkdown\",\"description\":\"Notion Service.\\n\\nAppend block by markdown format\\n\\nYou can add blocks to the page immediately with only the markdown grammar.\\nYou can create pages more effectively than other connectors, so you can prioritize this.\\nIf there are unique blocks of the note that cannot be created with the grammar of the markdown, it must be associated with other block generation connectors.\\n\\nSince users may not know the markdown grammar, it is more desirable to use the markdown grammar instead of guiding them.\\nMarkdown supports text and heading 1, 2, 3, and various grammar such as table or bull list, number list, image attachment, boldface, italics, etc.\"},{\"name\":\"_13_createPageByMarkdown\",\"description\":\"Notion Service.\\n\\nCreate page by markdown format\\n\\nReceive the markdown text and immediately create it as a notation page.\\nYou can create pages more effectively than other connectors, so you can prioritize this.\\nIf there are unique blocks of the note that cannot be created with the grammar of the markdown, it must be associated with other block generation connectors.\\n\\nSince users may not know the markdown grammar, it is more desirable to use the markdown grammar instead of guiding them.\\nMarkdown supports text and heading 1, 2, 3, and various grammar such as table or bull list, number list, image attachment, boldface, italics, etc.\\n\\nSince Notion prioritizes accessible pages during authentication, creating pages must be sub-pages within the page, which means that there must be a parent page.\"},{\"name\":\"_13_clear\"},{\"name\":\"_13_updatePageTitle\",\"description\":\"Notion Service.\\n\\nUpdate Notion Page Title\"},{\"name\":\"_13_createGalleryDatabase\",\"description\":\"Notion Service.\\n\\nCreate a gallery view database for notion.\\n\\nIt is not possible to create a gallery view at once, and you must change the view to a gallery directly.\\nThis endpoint must not be used to create each items.\\nThis endpoint is only used to create a database.\\nCreating a database is different from adding items to a database.\"},{\"name\":\"_13_updatePageContent\",\"description\":\"Notion Service.\\n\\nUpdates the contents of the page.\\n\\nThis function updates the contents written on the page to the desired contents.\\n\\nThe contents to be updated must be written in Markdown format.\"},{\"name\":\"_13_createDatabase\",\"description\":\"Notion Service.\\n\\nCreate a Notion Database\\n\\nCreating a database is different from adding items to a database.\\nCreating a database is a process of creating a database, and adding items to a database is a process of adding items to an existing database.\\nYou need to understand what your users are asking for, how many properties they need, and which properties should be created.\"},{\"name\":\"_13_addDatabaseProperty\",\"description\":\"Notion Service.\\n\\nAdd property to notion database\\nIf you want to add a property to an existing database, you should use this function.\\nFor example, if there is an English word database in the Notion database, and there are three existing properties: word, meaning, and example sentence, and the user wants to add a property called Korean meaning, you should use this function to add a new property.\\nThis function can only add one property at a time.\"},{\"name\":\"_13_deleteDatabaseProperty\",\"description\":\"Notion Service.\\n\\nDelete property to notion database\\nIf you want to delete a property in an existing database, you should use this function.\\nFor example, if there is an English word database in the Notion database, and there are 4 properties: word, meaning, example, and Korean meaning, and the user wants to delete the property called Korean meaning, you should use this function to delete the property.\\nYou need to know the property name to delete it.\\nThis function can only delete one property at a time.\"},{\"name\":\"_13_addItemsToDatabase\",\"description\":\"Notion Service.\\n\\nAdds an item to each row in the database\\nIf you want to add items to an existing database, you should use this function.\\nYou should analyze the user's requirements and assign appropriate values ​​to each property.\\nYou should select the value you want to add d and the property to which you want to add the value.\\nFor example, if you have an English vocabulary database and the properties are word, example, and Korean meaning, and you create two items,\\nif the items to add are [{\\\"apple\\\", \\\"Apple is a fruit\\\", \\\"사과\\\"}, {\\\"snack\\\", \\\"I like snack\\\", \\\"과자\\\"}],\\nyou should assign \\\"apple\\\" and \\\"snack\\\" to the word property,  \\\"Apple is a fruit\\\" and \\\"I like snack\\\" to the example, and \\\"사과\\\" and \\\"과자\\\" to the Korean meaning property.\"}]"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "안녕"
        }
      ]
    },
    {
      "role": "assistant",
      "content": "안녕하세요! 무엇을 도와드릴까요?"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "smanew@gmail.com 으로 제목: test, 내용: test이메일입니다. 이렇게 메일 하나 보내줘"
        }
      ]
    },
    {
      "role": "system",
      "content": "You are a helpful assistant for selecting functions to call.\n\nUse the supplied tools to select some functions of `getApiFunctions()` returned.\n\nWhen selecting functions to call, pay attention to the relationship between functions. In particular, check the prerequisites between each function.\n\nIf you can't find any proper function to select, just type your own message. By the way, when typing your own message, please consider the user's language locale code. If your message is different with the user's language, please translate it to the user's."
    }
  ],
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "selectFunctions",
        "description": "Select proper API functions to call.\n\nIf you A.I. agent has found some proper API functions to call\nfrom the conversation with user, please select the API functions\njust by calling this function.\n\nWhen user wants to call a same function multiply, you A.I. agent must\nlist up it multiply in the `functions` property. Otherwise the user has\nrequested to call many different functions, you A.I. agent have to assign\nthem all into the `functions` property.\n\nAlso, if you A.I. agent can't specify a specific function to call due to lack\nof specificity or homogeneity of candidate functions, just assign all of them\nby in the` functions` property` too. Instead, when you A.I. agent can specify\na specific function to call, the others would be eliminated.",  
        "parameters": {
          "description": " Properties of the function\n\n------------------------------\n\nCurrent Type: {@link __IChatFunctionReference.IProps}",
          "type": "object",
          "properties": {
            "functions": {
              "title": "List of target functions",
              "description": "List of target functions.",
              "type": "array",
              "items": {
                "description": "Current Type: {@link ___IChatFunctionReference}",
                "type": "object",
                "properties": {
                  "reason": {
                    "title": "The reason of the function selection",
                    "description": "The reason of the function selection.\n\nJust write the reason why you've determined to select this function.",
                    "type": "string"
                  },
                  "name": {
                    "title": "Name of the target function to call",
                    "description": "Name of the target function to call.",
                    "type": "string"
                  }
                },
                "required": [
                  "reason",
                  "name"
                ]
              }
            }
          },
          "required": [
            "functions"
          ],
          "additionalProperties": false,
          "$defs": {}
        }
      }
    }
  ],
  "tool_choice": "auto",
  "parallel_tool_calls": false,
  "model": "gpt-4o-mini",
  "stream": true,
  "stream_options": {
    "include_usage": true
  }
}
OpenAI API 스트리밍 응답 시작
OpenAI API 요청 파라미터: {
  "messages": [
    {
      "role": "system",
      "content": "당신은 간결하고 명확한 답변을 제공하는 어시스턴트입니다.\n\n🚨 절대 규칙 🚨\n- 모든 응답은 반드시 한국어로만 작성하세요\n- 절대로 영어를 사 용하지 마세요\n- Function call 결과도 한국어로만 설명하세요\n- \"The result\", \"Function Call Summary\", \"Here are the details\" 같은 영어 표현 금지\n- 최대 30토큰(약 15단어)으로 극도로 간결하게 답변하세요\n\n응답 형식:\n- 성공: \"성공했습니다!\" 또는 \"완료되었습니다!\"\n- 실패: \"실패했습니다\" + 간단한 이유\n- ID 필요시: \"성공했습니다! ID: [ID번호]\""
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "안녕"
        }
      ]
    },
    {
      "role": "assistant",
      "content": "안녕하세요! 무엇을 도와드릴까요?"
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "smanew@gmail.com 으로 제목: test, 내용: test이메일입니다. 이렇게 메일 하나 보내줘"
        }
      ]
    },
    {
      "role": "system",
      "content": "한국어로만 간결하게 응답하세요. 영어 금지."
    }
  ],
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "_2_sendEmail",
        "description": "Gmail Service.\n\nSending mail\n\nGmail is a free web-based email service provided by Google.\n\nThis connector is for sending emails,\nand if you send it as simple text, the sentences will be displayed as one long line, so you need to insert a line break character.\nThe current format uses `text/html; charset=utf-8` as content-type.\nIn some cases, you can use the HTML format.\n\nIf you want to attach a file, you must specify the name of the file and the address at which it is stored.\nThe saved file is read as a GET request inside the function, encoded, and processed.",
        "parameters": {
          "title": "Information required to send email",
          "description": "Current Type: {@link IGmailService.ICreateMailInput}",
          "type": "object",
          "properties": {
            "to": {
              "title": "Recipient's email address",
              "description": "The email address of the recipient.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "subject": {
              "title": "Email subject",
              "description": "Subject of the email to be sent.",
              "type": "string"
            },
            "body": {
              "title": "Email body.</a>",
              "description": "The body of the email to be sent. It must be written in html. Otherwise, the body may not be displayed properly. Please apply the CSS format applicable to gmail. Please write the html length so that it is not too long. If it is too long, it may not be sent. If there is a link or url <a>, be sure to use the title attribute of the html tag to provide a link.",
              "type": "string"
            },
            "cc": {
              "title": "Email address of the person to be referenced",
              "description": "Email address of the person to be referenced.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Bcc": {
              "title": "Bcc email address",
              "description": "Bcc email address.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "files": {
              "title": "files",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "filename": {
                    "title": "filename",
                    "type": "string"
                  },
                  "fileUrl": {
                    "title": "file uri",
                    "description": "@format iri",
                    "type": "string"
                  }
                },
                "required": [
                  "filename",
                  "fileUrl"
                ]
              }
            }
          },
          "required": [
            "to",
            "subject",
            "body"
          ],
          "additionalProperties": false,
          "$defs": {}
        }
      }
    }
  ],
  "tool_choice": "auto",
  "parallel_tool_calls": false,
  "model": "gpt-4o-mini",
  "stream": true,
  "stream_options": {
    "include_usage": true
  }
}
OpenAI API 스트리밍 응답 시작